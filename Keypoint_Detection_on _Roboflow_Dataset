{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30886,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install roboflow\n\nfrom roboflow import Roboflow\nrf = Roboflow(api_key=\"YirwAR4nEK8SkCYqpQRu\")\nproject = rf.workspace(\"manahil-ejaz-k4cam\").project(\"parkingarea-pelm5\")\nversion = project.version(1)\ndataset = version.download(\"yolov8\")\n                ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def order_points_convex(points):\n    \"\"\"\n    Orders the points to form a convex quadrilateral (rectangle).\n    \"\"\"\n    if len(points) != 4:\n        return points  # Only works for quadrilaterals\n    \n    # Calculate the centroid of the points\n    centroid_x = sum(p[0] for p in points) / 4\n    centroid_y = sum(p[1] for p in points) / 4\n    \n    # Sort points by angle relative to the centroid\n    def angle_from_centroid(point):\n        return math.atan2(point[1] - centroid_y, point[0] - centroid_x)\n    \n    sorted_points = sorted(points, key=angle_from_centroid)\n    return sorted_points\n    \ndef filter_images_with_4_plus_keypoints(directory):\n    \"\"\"\n    Filters images that have polygons with more than 4 keypoints.\n    Returns a list of file paths for such images.\n    \"\"\"\n    json_files = [f for f in os.listdir(directory) if f.endswith(\".json\")]\n    filtered_files = []\n\n    for filename in json_files:\n        json_path = os.path.join(directory, filename)\n        with open(json_path, 'r') as f:\n            keypoints = json.load(f)\n        \n        if \"shapes\" not in keypoints:\n            continue\n        \n        for shape in keypoints[\"shapes\"]:\n            if len(shape[\"points\"]) > 4:\n                filtered_files.append(json_path)\n                break  # Stop checking other shapes in the same file\n    \n    return filtered_files\n    \ndef is_convex(points):\n    \"\"\"\n    Checks if the given points form a convex polygon.\n    \"\"\"\n    if len(points) < 3:\n        return False  # A polygon must have at least 3 points\n    \n    polygon = Polygon(points)\n    return polygon.is_valid and polygon.convex_hull.equals(polygon)\n    \ndef ensure_rectangle_shape(points):\n    \"\"\"\n    Ensures the points form a rectangle-shaped polygon.\n    \"\"\"\n    if len(points) != 4:\n        return points  # Only works for quadrilaterals\n    \n    # Order the points to form a convex quadrilateral\n    ordered_points = order_points_convex(points)\n    \n    # Check if the ordered points form a convex polygon\n    if is_convex(ordered_points):\n        return ordered_points\n    else:\n        # If not convex, adjust the points slightly\n        adjusted_points = [(x + 0.01 * i, y + 0.01 * i) for i, (x, y) in enumerate(ordered_points)]\n        return adjusted_points\n\n\ndef find_closest_points(points):\n    min_distance = float('inf')\n    closest_pair = None\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (i, j)\n    \n    return closest_pair\n    \ndef replace_closest_points(points):\n    if len(points) > 4:\n        # Find the two closest points\n        i, j = find_closest_points(points)\n        # Calculate the midpoint of the two closest points\n        midpoint = (\n            (points[i][0] + points[j][0]) / 2,\n            (points[i][1] + points[j][1]) / 2\n        )\n        # Replace the two closest points with the midpoint\n        new_points = [point for idx, point in enumerate(points) if idx not in (i, j)]\n        new_points.append(midpoint)\n        return new_points\n    return points\ndef reorder_points(points):\n    \"\"\"\n    Reorders the points to ensure:\n    - x1: top-left\n    - x2: top-right\n    - x3: bottom-right\n    - x4: bottom-left\n    \"\"\"\n    if len(points) != 4:\n        return points  # Only works for quadrilaterals\n    \n    # Sort points by y-coordinate (top to bottom)\n    sorted_by_y = sorted(points, key=lambda p: p[1])\n    \n    # Separate top and bottom points\n    top_points = sorted_by_y[:2]  # Top two points (smallest y)\n    bottom_points = sorted_by_y[2:]  # Bottom two points (largest y)\n    \n    # Sort top points by x-coordinate (left to right)\n    top_points_sorted = sorted(top_points, key=lambda p: p[0])\n    x1 = top_points_sorted[0]  # Top-left\n    x2 = top_points_sorted[1]  # Top-right\n    \n    # Sort bottom points by x-coordinate (left to right)\n    bottom_points_sorted = sorted(bottom_points, key=lambda p: p[0])\n    x4 = bottom_points_sorted[0]  # Bottom-left\n    x3 = bottom_points_sorted[1]  # Bottom-right\n    \n    # Return reordered points\n    return [x1, x2, x3, x4]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def bbox_to_polygon(box):\n    \"\"\"\n    Converts bounding box format (x, y, width, height) to polygon points.\n    \"\"\"\n    x, y, width, height = box[\"x\"], box[\"y\"], box[\"width\"], box[\"height\"]\n    \n    return [\n        (x, y),  # Top-left\n        (x + width, y),  # Top-right\n        (x + width, y + height),  # Bottom-right\n        (x, y + height)  # Bottom-left\n    ]\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for box in dataset[\"boxes\"]:\n    polygon_points = bbox_to_polygon(box)\n    \n    # Apply your functions\n    ordered_points = order_points_convex(polygon_points)\n    reordered_points = reorder_points(ordered_points)\n    \n    print(f\"Original Bounding Box: {box}\")\n    print(f\"Converted Polygon Points: {polygon_points}\")\n    print(f\"Reordered Points: {reordered_points}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}